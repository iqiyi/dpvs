//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2025 IQiYi Inc. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by deepcopy-gen. DO NOT EDIT.

package manager

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Metric) DeepCopyInto(out *Metric) {
	*out = *in
	out.state = in.state
	out.stats = in.stats
	if in.extras != nil {
		in, out := &in.extras, &out.extras
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Metric.
func (in *Metric) DeepCopy() *Metric {
	if in == nil {
		return nil
	}
	out := new(Metric)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MetricDB) DeepCopyInto(out *MetricDB) {
	*out = *in
	if in.data != nil {
		in, out := &in.data, &out.data
		*out = make(map[VAID]*VAMetric, len(*in))
		for key, val := range *in {
			var outVal *VAMetric
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(VAMetric)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	out.lock = in.lock
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MetricDB.
func (in *MetricDB) DeepCopy() *MetricDB {
	if in == nil {
		return nil
	}
	out := new(MetricDB)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VAMetric) DeepCopyInto(out *VAMetric) {
	*out = *in
	out.state = in.state
	out.stats = in.stats
	if in.extras != nil {
		in, out := &in.extras, &out.extras
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.vss != nil {
		in, out := &in.vss, &out.vss
		*out = make(map[VSID]*VSMetric, len(*in))
		for key, val := range *in {
			var outVal *VSMetric
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(VSMetric)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VAMetric.
func (in *VAMetric) DeepCopy() *VAMetric {
	if in == nil {
		return nil
	}
	out := new(VAMetric)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSMetric) DeepCopyInto(out *VSMetric) {
	*out = *in
	out.state = in.state
	out.stats = in.stats
	if in.extras != nil {
		in, out := &in.extras, &out.extras
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.checkers != nil {
		in, out := &in.checkers, &out.checkers
		*out = make(map[CheckerID]*Metric, len(*in))
		for key, val := range *in {
			var outVal *Metric
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(Metric)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSMetric.
func (in *VSMetric) DeepCopy() *VSMetric {
	if in == nil {
		return nil
	}
	out := new(VSMetric)
	in.DeepCopyInto(out)
	return out
}
