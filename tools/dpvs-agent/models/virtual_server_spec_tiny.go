// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualServerSpecTiny virtual server spec tiny
//
// swagger:model VirtualServerSpecTiny
type VirtualServerSpecTiny struct {

	// bps
	Bps uint32 `json:"Bps,omitempty"`

	// conn timeout
	ConnTimeout uint32 `json:"ConnTimeout,omitempty"`

	// expire quiescent
	ExpireQuiescent *bool `json:"ExpireQuiescent,omitempty"`

	// fwmark
	Fwmark uint32 `json:"Fwmark,omitempty"`

	// limit proportion
	LimitProportion uint32 `json:"LimitProportion,omitempty"`

	// match
	Match *MatchSpec `json:"Match,omitempty"`

	// proxy protocol
	// Enum: [v2 v1 disable]
	ProxyProtocol string `json:"ProxyProtocol,omitempty"`

	// sched name
	// Enum: [rr wrr wlc conhash]
	SchedName string `json:"SchedName,omitempty"`

	// syn proxy
	SynProxy *bool `json:"SynProxy,omitempty"`

	// timeout
	Timeout uint32 `json:"Timeout,omitempty"`
}

// Validate validates this virtual server spec tiny
func (m *VirtualServerSpecTiny) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualServerSpecTiny) validateMatch(formats strfmt.Registry) error {
	if swag.IsZero(m.Match) { // not required
		return nil
	}

	if m.Match != nil {
		if err := m.Match.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Match")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Match")
			}
			return err
		}
	}

	return nil
}

var virtualServerSpecTinyTypeProxyProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["v2","v1","disable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		virtualServerSpecTinyTypeProxyProtocolPropEnum = append(virtualServerSpecTinyTypeProxyProtocolPropEnum, v)
	}
}

const (

	// VirtualServerSpecTinyProxyProtocolV2 captures enum value "v2"
	VirtualServerSpecTinyProxyProtocolV2 string = "v2"

	// VirtualServerSpecTinyProxyProtocolV1 captures enum value "v1"
	VirtualServerSpecTinyProxyProtocolV1 string = "v1"

	// VirtualServerSpecTinyProxyProtocolDisable captures enum value "disable"
	VirtualServerSpecTinyProxyProtocolDisable string = "disable"
)

// prop value enum
func (m *VirtualServerSpecTiny) validateProxyProtocolEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, virtualServerSpecTinyTypeProxyProtocolPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VirtualServerSpecTiny) validateProxyProtocol(formats strfmt.Registry) error {
	if swag.IsZero(m.ProxyProtocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateProxyProtocolEnum("ProxyProtocol", "body", m.ProxyProtocol); err != nil {
		return err
	}

	return nil
}

var virtualServerSpecTinyTypeSchedNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["rr","wrr","wlc","conhash"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		virtualServerSpecTinyTypeSchedNamePropEnum = append(virtualServerSpecTinyTypeSchedNamePropEnum, v)
	}
}

const (

	// VirtualServerSpecTinySchedNameRr captures enum value "rr"
	VirtualServerSpecTinySchedNameRr string = "rr"

	// VirtualServerSpecTinySchedNameWrr captures enum value "wrr"
	VirtualServerSpecTinySchedNameWrr string = "wrr"

	// VirtualServerSpecTinySchedNameWlc captures enum value "wlc"
	VirtualServerSpecTinySchedNameWlc string = "wlc"

	// VirtualServerSpecTinySchedNameConhash captures enum value "conhash"
	VirtualServerSpecTinySchedNameConhash string = "conhash"
)

// prop value enum
func (m *VirtualServerSpecTiny) validateSchedNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, virtualServerSpecTinyTypeSchedNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VirtualServerSpecTiny) validateSchedName(formats strfmt.Registry) error {
	if swag.IsZero(m.SchedName) { // not required
		return nil
	}

	// value enum
	if err := m.validateSchedNameEnum("SchedName", "body", m.SchedName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this virtual server spec tiny based on the context it is used
func (m *VirtualServerSpecTiny) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMatch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualServerSpecTiny) contextValidateMatch(ctx context.Context, formats strfmt.Registry) error {

	if m.Match != nil {
		if err := m.Match.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Match")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Match")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualServerSpecTiny) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualServerSpecTiny) UnmarshalBinary(b []byte) error {
	var res VirtualServerSpecTiny
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
