// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualServerSpecExpand virtual server spec expand
//
// swagger:model VirtualServerSpecExpand
type VirtualServerSpecExpand struct {

	// addr
	Addr string `json:"Addr,omitempty"`

	// af
	Af uint32 `json:"Af,omitempty"`

	// bps
	Bps uint32 `json:"Bps,omitempty"`

	// conn timeout
	ConnTimeout uint32 `json:"ConnTimeout,omitempty"`

	// dest check
	DestCheck []DestCheckSpec `json:"DestCheck"`

	// expire quiescent
	// Enum: [true false]
	ExpireQuiescent string `json:"ExpireQuiescent,omitempty"`

	// flags
	Flags string `json:"Flags,omitempty"`

	// fwmark
	Fwmark uint32 `json:"Fwmark,omitempty"`

	// limit proportion
	LimitProportion uint32 `json:"LimitProportion,omitempty"`

	// match
	Match *MatchSpec `json:"Match,omitempty"`

	// netmask
	Netmask uint32 `json:"Netmask,omitempty"`

	// port
	Port uint16 `json:"Port,omitempty"`

	// proto
	Proto uint8 `json:"Proto,omitempty"`

	// proxy proto
	ProxyProto uint8 `json:"ProxyProto,omitempty"`

	// r ss
	RSs *RealServerExpandList `json:"RSs,omitempty"`

	// sched name
	// Enum: [rr wrr wlc conhash]
	SchedName string `json:"SchedName,omitempty"`

	// stats
	Stats *ServerStats `json:"Stats,omitempty"`

	// syn proxy
	// Enum: [true false]
	SynProxy string `json:"SynProxy,omitempty"`

	// timeout
	Timeout uint32 `json:"Timeout,omitempty"`
}

// Validate validates this virtual server spec expand
func (m *VirtualServerSpecExpand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestCheck(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpireQuiescent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRSs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSynProxy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualServerSpecExpand) validateDestCheck(formats strfmt.Registry) error {
	if swag.IsZero(m.DestCheck) { // not required
		return nil
	}

	for i := 0; i < len(m.DestCheck); i++ {

		if err := m.DestCheck[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DestCheck" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DestCheck" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

var virtualServerSpecExpandTypeExpireQuiescentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["true","false"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		virtualServerSpecExpandTypeExpireQuiescentPropEnum = append(virtualServerSpecExpandTypeExpireQuiescentPropEnum, v)
	}
}

const (

	// VirtualServerSpecExpandExpireQuiescentTrue captures enum value "true"
	VirtualServerSpecExpandExpireQuiescentTrue string = "true"

	// VirtualServerSpecExpandExpireQuiescentFalse captures enum value "false"
	VirtualServerSpecExpandExpireQuiescentFalse string = "false"
)

// prop value enum
func (m *VirtualServerSpecExpand) validateExpireQuiescentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, virtualServerSpecExpandTypeExpireQuiescentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VirtualServerSpecExpand) validateExpireQuiescent(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpireQuiescent) { // not required
		return nil
	}

	// value enum
	if err := m.validateExpireQuiescentEnum("ExpireQuiescent", "body", m.ExpireQuiescent); err != nil {
		return err
	}

	return nil
}

func (m *VirtualServerSpecExpand) validateMatch(formats strfmt.Registry) error {
	if swag.IsZero(m.Match) { // not required
		return nil
	}

	if m.Match != nil {
		if err := m.Match.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Match")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Match")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualServerSpecExpand) validateRSs(formats strfmt.Registry) error {
	if swag.IsZero(m.RSs) { // not required
		return nil
	}

	if m.RSs != nil {
		if err := m.RSs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RSs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RSs")
			}
			return err
		}
	}

	return nil
}

var virtualServerSpecExpandTypeSchedNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["rr","wrr","wlc","conhash"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		virtualServerSpecExpandTypeSchedNamePropEnum = append(virtualServerSpecExpandTypeSchedNamePropEnum, v)
	}
}

const (

	// VirtualServerSpecExpandSchedNameRr captures enum value "rr"
	VirtualServerSpecExpandSchedNameRr string = "rr"

	// VirtualServerSpecExpandSchedNameWrr captures enum value "wrr"
	VirtualServerSpecExpandSchedNameWrr string = "wrr"

	// VirtualServerSpecExpandSchedNameWlc captures enum value "wlc"
	VirtualServerSpecExpandSchedNameWlc string = "wlc"

	// VirtualServerSpecExpandSchedNameConhash captures enum value "conhash"
	VirtualServerSpecExpandSchedNameConhash string = "conhash"
)

// prop value enum
func (m *VirtualServerSpecExpand) validateSchedNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, virtualServerSpecExpandTypeSchedNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VirtualServerSpecExpand) validateSchedName(formats strfmt.Registry) error {
	if swag.IsZero(m.SchedName) { // not required
		return nil
	}

	// value enum
	if err := m.validateSchedNameEnum("SchedName", "body", m.SchedName); err != nil {
		return err
	}

	return nil
}

func (m *VirtualServerSpecExpand) validateStats(formats strfmt.Registry) error {
	if swag.IsZero(m.Stats) { // not required
		return nil
	}

	if m.Stats != nil {
		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Stats")
			}
			return err
		}
	}

	return nil
}

var virtualServerSpecExpandTypeSynProxyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["true","false"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		virtualServerSpecExpandTypeSynProxyPropEnum = append(virtualServerSpecExpandTypeSynProxyPropEnum, v)
	}
}

const (

	// VirtualServerSpecExpandSynProxyTrue captures enum value "true"
	VirtualServerSpecExpandSynProxyTrue string = "true"

	// VirtualServerSpecExpandSynProxyFalse captures enum value "false"
	VirtualServerSpecExpandSynProxyFalse string = "false"
)

// prop value enum
func (m *VirtualServerSpecExpand) validateSynProxyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, virtualServerSpecExpandTypeSynProxyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VirtualServerSpecExpand) validateSynProxy(formats strfmt.Registry) error {
	if swag.IsZero(m.SynProxy) { // not required
		return nil
	}

	// value enum
	if err := m.validateSynProxyEnum("SynProxy", "body", m.SynProxy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this virtual server spec expand based on the context it is used
func (m *VirtualServerSpecExpand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDestCheck(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRSs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualServerSpecExpand) contextValidateDestCheck(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DestCheck); i++ {

		if err := m.DestCheck[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DestCheck" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DestCheck" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualServerSpecExpand) contextValidateMatch(ctx context.Context, formats strfmt.Registry) error {

	if m.Match != nil {
		if err := m.Match.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Match")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Match")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualServerSpecExpand) contextValidateRSs(ctx context.Context, formats strfmt.Registry) error {

	if m.RSs != nil {
		if err := m.RSs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RSs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RSs")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualServerSpecExpand) contextValidateStats(ctx context.Context, formats strfmt.Registry) error {

	if m.Stats != nil {
		if err := m.Stats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Stats")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualServerSpecExpand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualServerSpecExpand) UnmarshalBinary(b []byte) error {
	var res VirtualServerSpecExpand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
