// Code generated by go-swagger; DO NOT EDIT.

package device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewPutDeviceNameNicParams creates a new PutDeviceNameNicParams object
// with the default values initialized.
func NewPutDeviceNameNicParams() PutDeviceNameNicParams {

	var (
		// initialize parameters with default values

		forward2KniDefault = string("unset")
		linkDefault        = string("unset")

		promiscDefault = string("unset")
	)

	return PutDeviceNameNicParams{
		Forward2Kni: &forward2KniDefault,

		Link: &linkDefault,

		Promisc: &promiscDefault,
	}
}

// PutDeviceNameNicParams contains all the bound params for the put device name nic operation
// typically these are obtained from a http.Request
//
// swagger:parameters PutDeviceNameNic
type PutDeviceNameNicParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	  Default: "unset"
	*/
	Forward2Kni *string
	/*
	  In: query
	  Default: "unset"
	*/
	Link *string
	/*
	  Required: true
	  In: path
	*/
	Name string
	/*
	  In: query
	  Default: "unset"
	*/
	Promisc *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPutDeviceNameNicParams() beforehand.
func (o *PutDeviceNameNicParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qForward2Kni, qhkForward2Kni, _ := qs.GetOK("forward2Kni")
	if err := o.bindForward2Kni(qForward2Kni, qhkForward2Kni, route.Formats); err != nil {
		res = append(res, err)
	}

	qLink, qhkLink, _ := qs.GetOK("link")
	if err := o.bindLink(qLink, qhkLink, route.Formats); err != nil {
		res = append(res, err)
	}

	rName, rhkName, _ := route.Params.GetOK("name")
	if err := o.bindName(rName, rhkName, route.Formats); err != nil {
		res = append(res, err)
	}

	qPromisc, qhkPromisc, _ := qs.GetOK("promisc")
	if err := o.bindPromisc(qPromisc, qhkPromisc, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindForward2Kni binds and validates parameter Forward2Kni from query.
func (o *PutDeviceNameNicParams) bindForward2Kni(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewPutDeviceNameNicParams()
		return nil
	}
	o.Forward2Kni = &raw

	if err := o.validateForward2Kni(formats); err != nil {
		return err
	}

	return nil
}

// validateForward2Kni carries on validations for parameter Forward2Kni
func (o *PutDeviceNameNicParams) validateForward2Kni(formats strfmt.Registry) error {

	if err := validate.EnumCase("forward2Kni", "query", *o.Forward2Kni, []interface{}{"unset", true, false}, true); err != nil {
		return err
	}

	return nil
}

// bindLink binds and validates parameter Link from query.
func (o *PutDeviceNameNicParams) bindLink(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewPutDeviceNameNicParams()
		return nil
	}
	o.Link = &raw

	if err := o.validateLink(formats); err != nil {
		return err
	}

	return nil
}

// validateLink carries on validations for parameter Link
func (o *PutDeviceNameNicParams) validateLink(formats strfmt.Registry) error {

	if err := validate.EnumCase("link", "query", *o.Link, []interface{}{"unset", "up", "down"}, true); err != nil {
		return err
	}

	return nil
}

// bindName binds and validates parameter Name from path.
func (o *PutDeviceNameNicParams) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.Name = raw

	return nil
}

// bindPromisc binds and validates parameter Promisc from query.
func (o *PutDeviceNameNicParams) bindPromisc(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewPutDeviceNameNicParams()
		return nil
	}
	o.Promisc = &raw

	if err := o.validatePromisc(formats); err != nil {
		return err
	}

	return nil
}

// validatePromisc carries on validations for parameter Promisc
func (o *PutDeviceNameNicParams) validatePromisc(formats strfmt.Registry) error {

	if err := validate.EnumCase("promisc", "query", *o.Promisc, []interface{}{"unset", true, false}, true); err != nil {
		return err
	}

	return nil
}
