// Code generated by go-swagger; DO NOT EDIT.

package virtualserver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutVsVipPortRsHealthHandlerFunc turns a function with the right signature into a put vs vip port rs health handler
type PutVsVipPortRsHealthHandlerFunc func(PutVsVipPortRsHealthParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutVsVipPortRsHealthHandlerFunc) Handle(params PutVsVipPortRsHealthParams) middleware.Responder {
	return fn(params)
}

// PutVsVipPortRsHealthHandler interface for that can handle valid put vs vip port rs health params
type PutVsVipPortRsHealthHandler interface {
	Handle(PutVsVipPortRsHealthParams) middleware.Responder
}

// NewPutVsVipPortRsHealth creates a new http.Handler for the put vs vip port rs health operation
func NewPutVsVipPortRsHealth(ctx *middleware.Context, handler PutVsVipPortRsHealthHandler) *PutVsVipPortRsHealth {
	return &PutVsVipPortRsHealth{Context: ctx, Handler: handler}
}

/*
	PutVsVipPortRsHealth swagger:route PUT /vs/{VipPort}/rs/health virtualserver putVsVipPortRsHealth

dpvs healthcheck update rs weight
*/
type PutVsVipPortRsHealth struct {
	Context *middleware.Context
	Handler PutVsVipPortRsHealthHandler
}

func (o *PutVsVipPortRsHealth) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutVsVipPortRsHealthParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
