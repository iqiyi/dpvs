// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/dpvs-agent/restapi/operations/device"
	"github.com/dpvs-agent/restapi/operations/virtualserver"
)

// NewDpvsAgentAPI creates a new DpvsAgent instance
func NewDpvsAgentAPI(spec *loads.Document) *DpvsAgentAPI {
	return &DpvsAgentAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		DeviceDeleteDeviceNameAddrHandler: device.DeleteDeviceNameAddrHandlerFunc(func(params device.DeleteDeviceNameAddrParams) middleware.Responder {
			return middleware.NotImplemented("operation device.DeleteDeviceNameAddr has not yet been implemented")
		}),
		DeviceDeleteDeviceNameNetlinkHandler: device.DeleteDeviceNameNetlinkHandlerFunc(func(params device.DeleteDeviceNameNetlinkParams) middleware.Responder {
			return middleware.NotImplemented("operation device.DeleteDeviceNameNetlink has not yet been implemented")
		}),
		DeviceDeleteDeviceNameNetlinkAddrHandler: device.DeleteDeviceNameNetlinkAddrHandlerFunc(func(params device.DeleteDeviceNameNetlinkAddrParams) middleware.Responder {
			return middleware.NotImplemented("operation device.DeleteDeviceNameNetlinkAddr has not yet been implemented")
		}),
		DeviceDeleteDeviceNameRouteHandler: device.DeleteDeviceNameRouteHandlerFunc(func(params device.DeleteDeviceNameRouteParams) middleware.Responder {
			return middleware.NotImplemented("operation device.DeleteDeviceNameRoute has not yet been implemented")
		}),
		DeviceDeleteDeviceNameVlanHandler: device.DeleteDeviceNameVlanHandlerFunc(func(params device.DeleteDeviceNameVlanParams) middleware.Responder {
			return middleware.NotImplemented("operation device.DeleteDeviceNameVlan has not yet been implemented")
		}),
		VirtualserverDeleteVsVipPortHandler: virtualserver.DeleteVsVipPortHandlerFunc(func(params virtualserver.DeleteVsVipPortParams) middleware.Responder {
			return middleware.NotImplemented("operation virtualserver.DeleteVsVipPort has not yet been implemented")
		}),
		VirtualserverDeleteVsVipPortAllowHandler: virtualserver.DeleteVsVipPortAllowHandlerFunc(func(params virtualserver.DeleteVsVipPortAllowParams) middleware.Responder {
			return middleware.NotImplemented("operation virtualserver.DeleteVsVipPortAllow has not yet been implemented")
		}),
		VirtualserverDeleteVsVipPortDenyHandler: virtualserver.DeleteVsVipPortDenyHandlerFunc(func(params virtualserver.DeleteVsVipPortDenyParams) middleware.Responder {
			return middleware.NotImplemented("operation virtualserver.DeleteVsVipPortDeny has not yet been implemented")
		}),
		VirtualserverDeleteVsVipPortLaddrHandler: virtualserver.DeleteVsVipPortLaddrHandlerFunc(func(params virtualserver.DeleteVsVipPortLaddrParams) middleware.Responder {
			return middleware.NotImplemented("operation virtualserver.DeleteVsVipPortLaddr has not yet been implemented")
		}),
		VirtualserverDeleteVsVipPortRsHandler: virtualserver.DeleteVsVipPortRsHandlerFunc(func(params virtualserver.DeleteVsVipPortRsParams) middleware.Responder {
			return middleware.NotImplemented("operation virtualserver.DeleteVsVipPortRs has not yet been implemented")
		}),
		DeviceGetDeviceHandler: device.GetDeviceHandlerFunc(func(params device.GetDeviceParams) middleware.Responder {
			return middleware.NotImplemented("operation device.GetDevice has not yet been implemented")
		}),
		DeviceGetDeviceNameAddrHandler: device.GetDeviceNameAddrHandlerFunc(func(params device.GetDeviceNameAddrParams) middleware.Responder {
			return middleware.NotImplemented("operation device.GetDeviceNameAddr has not yet been implemented")
		}),
		DeviceGetDeviceNameNetlinkHandler: device.GetDeviceNameNetlinkHandlerFunc(func(params device.GetDeviceNameNetlinkParams) middleware.Responder {
			return middleware.NotImplemented("operation device.GetDeviceNameNetlink has not yet been implemented")
		}),
		DeviceGetDeviceNameNetlinkAddrHandler: device.GetDeviceNameNetlinkAddrHandlerFunc(func(params device.GetDeviceNameNetlinkAddrParams) middleware.Responder {
			return middleware.NotImplemented("operation device.GetDeviceNameNetlinkAddr has not yet been implemented")
		}),
		DeviceGetDeviceNameNicHandler: device.GetDeviceNameNicHandlerFunc(func(params device.GetDeviceNameNicParams) middleware.Responder {
			return middleware.NotImplemented("operation device.GetDeviceNameNic has not yet been implemented")
		}),
		DeviceGetDeviceNameRouteHandler: device.GetDeviceNameRouteHandlerFunc(func(params device.GetDeviceNameRouteParams) middleware.Responder {
			return middleware.NotImplemented("operation device.GetDeviceNameRoute has not yet been implemented")
		}),
		DeviceGetDeviceNameVlanHandler: device.GetDeviceNameVlanHandlerFunc(func(params device.GetDeviceNameVlanParams) middleware.Responder {
			return middleware.NotImplemented("operation device.GetDeviceNameVlan has not yet been implemented")
		}),
		VirtualserverGetVsHandler: virtualserver.GetVsHandlerFunc(func(params virtualserver.GetVsParams) middleware.Responder {
			return middleware.NotImplemented("operation virtualserver.GetVs has not yet been implemented")
		}),
		VirtualserverGetVsVipPortHandler: virtualserver.GetVsVipPortHandlerFunc(func(params virtualserver.GetVsVipPortParams) middleware.Responder {
			return middleware.NotImplemented("operation virtualserver.GetVsVipPort has not yet been implemented")
		}),
		VirtualserverGetVsVipPortAllowHandler: virtualserver.GetVsVipPortAllowHandlerFunc(func(params virtualserver.GetVsVipPortAllowParams) middleware.Responder {
			return middleware.NotImplemented("operation virtualserver.GetVsVipPortAllow has not yet been implemented")
		}),
		VirtualserverGetVsVipPortDenyHandler: virtualserver.GetVsVipPortDenyHandlerFunc(func(params virtualserver.GetVsVipPortDenyParams) middleware.Responder {
			return middleware.NotImplemented("operation virtualserver.GetVsVipPortDeny has not yet been implemented")
		}),
		VirtualserverGetVsVipPortLaddrHandler: virtualserver.GetVsVipPortLaddrHandlerFunc(func(params virtualserver.GetVsVipPortLaddrParams) middleware.Responder {
			return middleware.NotImplemented("operation virtualserver.GetVsVipPortLaddr has not yet been implemented")
		}),
		VirtualserverGetVsVipPortRsHandler: virtualserver.GetVsVipPortRsHandlerFunc(func(params virtualserver.GetVsVipPortRsParams) middleware.Responder {
			return middleware.NotImplemented("operation virtualserver.GetVsVipPortRs has not yet been implemented")
		}),
		VirtualserverPostVsVipPortAllowHandler: virtualserver.PostVsVipPortAllowHandlerFunc(func(params virtualserver.PostVsVipPortAllowParams) middleware.Responder {
			return middleware.NotImplemented("operation virtualserver.PostVsVipPortAllow has not yet been implemented")
		}),
		VirtualserverPostVsVipPortDenyHandler: virtualserver.PostVsVipPortDenyHandlerFunc(func(params virtualserver.PostVsVipPortDenyParams) middleware.Responder {
			return middleware.NotImplemented("operation virtualserver.PostVsVipPortDeny has not yet been implemented")
		}),
		VirtualserverPostVsVipPortRsHandler: virtualserver.PostVsVipPortRsHandlerFunc(func(params virtualserver.PostVsVipPortRsParams) middleware.Responder {
			return middleware.NotImplemented("operation virtualserver.PostVsVipPortRs has not yet been implemented")
		}),
		DevicePutDeviceNameAddrHandler: device.PutDeviceNameAddrHandlerFunc(func(params device.PutDeviceNameAddrParams) middleware.Responder {
			return middleware.NotImplemented("operation device.PutDeviceNameAddr has not yet been implemented")
		}),
		DevicePutDeviceNameNetlinkHandler: device.PutDeviceNameNetlinkHandlerFunc(func(params device.PutDeviceNameNetlinkParams) middleware.Responder {
			return middleware.NotImplemented("operation device.PutDeviceNameNetlink has not yet been implemented")
		}),
		DevicePutDeviceNameNetlinkAddrHandler: device.PutDeviceNameNetlinkAddrHandlerFunc(func(params device.PutDeviceNameNetlinkAddrParams) middleware.Responder {
			return middleware.NotImplemented("operation device.PutDeviceNameNetlinkAddr has not yet been implemented")
		}),
		DevicePutDeviceNameNicHandler: device.PutDeviceNameNicHandlerFunc(func(params device.PutDeviceNameNicParams) middleware.Responder {
			return middleware.NotImplemented("operation device.PutDeviceNameNic has not yet been implemented")
		}),
		DevicePutDeviceNameRouteHandler: device.PutDeviceNameRouteHandlerFunc(func(params device.PutDeviceNameRouteParams) middleware.Responder {
			return middleware.NotImplemented("operation device.PutDeviceNameRoute has not yet been implemented")
		}),
		DevicePutDeviceNameVlanHandler: device.PutDeviceNameVlanHandlerFunc(func(params device.PutDeviceNameVlanParams) middleware.Responder {
			return middleware.NotImplemented("operation device.PutDeviceNameVlan has not yet been implemented")
		}),
		VirtualserverPutVsVipPortHandler: virtualserver.PutVsVipPortHandlerFunc(func(params virtualserver.PutVsVipPortParams) middleware.Responder {
			return middleware.NotImplemented("operation virtualserver.PutVsVipPort has not yet been implemented")
		}),
		VirtualserverPutVsVipPortAllowHandler: virtualserver.PutVsVipPortAllowHandlerFunc(func(params virtualserver.PutVsVipPortAllowParams) middleware.Responder {
			return middleware.NotImplemented("operation virtualserver.PutVsVipPortAllow has not yet been implemented")
		}),
		VirtualserverPutVsVipPortDenyHandler: virtualserver.PutVsVipPortDenyHandlerFunc(func(params virtualserver.PutVsVipPortDenyParams) middleware.Responder {
			return middleware.NotImplemented("operation virtualserver.PutVsVipPortDeny has not yet been implemented")
		}),
		VirtualserverPutVsVipPortLaddrHandler: virtualserver.PutVsVipPortLaddrHandlerFunc(func(params virtualserver.PutVsVipPortLaddrParams) middleware.Responder {
			return middleware.NotImplemented("operation virtualserver.PutVsVipPortLaddr has not yet been implemented")
		}),
		VirtualserverPutVsVipPortRsHandler: virtualserver.PutVsVipPortRsHandlerFunc(func(params virtualserver.PutVsVipPortRsParams) middleware.Responder {
			return middleware.NotImplemented("operation virtualserver.PutVsVipPortRs has not yet been implemented")
		}),
		VirtualserverPutVsVipPortRsHealthHandler: virtualserver.PutVsVipPortRsHealthHandlerFunc(func(params virtualserver.PutVsVipPortRsHealthParams) middleware.Responder {
			return middleware.NotImplemented("operation virtualserver.PutVsVipPortRsHealth has not yet been implemented")
		}),
	}
}

/*DpvsAgentAPI dpvs agent api */
type DpvsAgentAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// DeviceDeleteDeviceNameAddrHandler sets the operation handler for the delete device name addr operation
	DeviceDeleteDeviceNameAddrHandler device.DeleteDeviceNameAddrHandler
	// DeviceDeleteDeviceNameNetlinkHandler sets the operation handler for the delete device name netlink operation
	DeviceDeleteDeviceNameNetlinkHandler device.DeleteDeviceNameNetlinkHandler
	// DeviceDeleteDeviceNameNetlinkAddrHandler sets the operation handler for the delete device name netlink addr operation
	DeviceDeleteDeviceNameNetlinkAddrHandler device.DeleteDeviceNameNetlinkAddrHandler
	// DeviceDeleteDeviceNameRouteHandler sets the operation handler for the delete device name route operation
	DeviceDeleteDeviceNameRouteHandler device.DeleteDeviceNameRouteHandler
	// DeviceDeleteDeviceNameVlanHandler sets the operation handler for the delete device name vlan operation
	DeviceDeleteDeviceNameVlanHandler device.DeleteDeviceNameVlanHandler
	// VirtualserverDeleteVsVipPortHandler sets the operation handler for the delete vs vip port operation
	VirtualserverDeleteVsVipPortHandler virtualserver.DeleteVsVipPortHandler
	// VirtualserverDeleteVsVipPortAllowHandler sets the operation handler for the delete vs vip port allow operation
	VirtualserverDeleteVsVipPortAllowHandler virtualserver.DeleteVsVipPortAllowHandler
	// VirtualserverDeleteVsVipPortDenyHandler sets the operation handler for the delete vs vip port deny operation
	VirtualserverDeleteVsVipPortDenyHandler virtualserver.DeleteVsVipPortDenyHandler
	// VirtualserverDeleteVsVipPortLaddrHandler sets the operation handler for the delete vs vip port laddr operation
	VirtualserverDeleteVsVipPortLaddrHandler virtualserver.DeleteVsVipPortLaddrHandler
	// VirtualserverDeleteVsVipPortRsHandler sets the operation handler for the delete vs vip port rs operation
	VirtualserverDeleteVsVipPortRsHandler virtualserver.DeleteVsVipPortRsHandler
	// DeviceGetDeviceHandler sets the operation handler for the get device operation
	DeviceGetDeviceHandler device.GetDeviceHandler
	// DeviceGetDeviceNameAddrHandler sets the operation handler for the get device name addr operation
	DeviceGetDeviceNameAddrHandler device.GetDeviceNameAddrHandler
	// DeviceGetDeviceNameNetlinkHandler sets the operation handler for the get device name netlink operation
	DeviceGetDeviceNameNetlinkHandler device.GetDeviceNameNetlinkHandler
	// DeviceGetDeviceNameNetlinkAddrHandler sets the operation handler for the get device name netlink addr operation
	DeviceGetDeviceNameNetlinkAddrHandler device.GetDeviceNameNetlinkAddrHandler
	// DeviceGetDeviceNameNicHandler sets the operation handler for the get device name nic operation
	DeviceGetDeviceNameNicHandler device.GetDeviceNameNicHandler
	// DeviceGetDeviceNameRouteHandler sets the operation handler for the get device name route operation
	DeviceGetDeviceNameRouteHandler device.GetDeviceNameRouteHandler
	// DeviceGetDeviceNameVlanHandler sets the operation handler for the get device name vlan operation
	DeviceGetDeviceNameVlanHandler device.GetDeviceNameVlanHandler
	// VirtualserverGetVsHandler sets the operation handler for the get vs operation
	VirtualserverGetVsHandler virtualserver.GetVsHandler
	// VirtualserverGetVsVipPortHandler sets the operation handler for the get vs vip port operation
	VirtualserverGetVsVipPortHandler virtualserver.GetVsVipPortHandler
	// VirtualserverGetVsVipPortAllowHandler sets the operation handler for the get vs vip port allow operation
	VirtualserverGetVsVipPortAllowHandler virtualserver.GetVsVipPortAllowHandler
	// VirtualserverGetVsVipPortDenyHandler sets the operation handler for the get vs vip port deny operation
	VirtualserverGetVsVipPortDenyHandler virtualserver.GetVsVipPortDenyHandler
	// VirtualserverGetVsVipPortLaddrHandler sets the operation handler for the get vs vip port laddr operation
	VirtualserverGetVsVipPortLaddrHandler virtualserver.GetVsVipPortLaddrHandler
	// VirtualserverGetVsVipPortRsHandler sets the operation handler for the get vs vip port rs operation
	VirtualserverGetVsVipPortRsHandler virtualserver.GetVsVipPortRsHandler
	// VirtualserverPostVsVipPortAllowHandler sets the operation handler for the post vs vip port allow operation
	VirtualserverPostVsVipPortAllowHandler virtualserver.PostVsVipPortAllowHandler
	// VirtualserverPostVsVipPortDenyHandler sets the operation handler for the post vs vip port deny operation
	VirtualserverPostVsVipPortDenyHandler virtualserver.PostVsVipPortDenyHandler
	// VirtualserverPostVsVipPortRsHandler sets the operation handler for the post vs vip port rs operation
	VirtualserverPostVsVipPortRsHandler virtualserver.PostVsVipPortRsHandler
	// DevicePutDeviceNameAddrHandler sets the operation handler for the put device name addr operation
	DevicePutDeviceNameAddrHandler device.PutDeviceNameAddrHandler
	// DevicePutDeviceNameNetlinkHandler sets the operation handler for the put device name netlink operation
	DevicePutDeviceNameNetlinkHandler device.PutDeviceNameNetlinkHandler
	// DevicePutDeviceNameNetlinkAddrHandler sets the operation handler for the put device name netlink addr operation
	DevicePutDeviceNameNetlinkAddrHandler device.PutDeviceNameNetlinkAddrHandler
	// DevicePutDeviceNameNicHandler sets the operation handler for the put device name nic operation
	DevicePutDeviceNameNicHandler device.PutDeviceNameNicHandler
	// DevicePutDeviceNameRouteHandler sets the operation handler for the put device name route operation
	DevicePutDeviceNameRouteHandler device.PutDeviceNameRouteHandler
	// DevicePutDeviceNameVlanHandler sets the operation handler for the put device name vlan operation
	DevicePutDeviceNameVlanHandler device.PutDeviceNameVlanHandler
	// VirtualserverPutVsVipPortHandler sets the operation handler for the put vs vip port operation
	VirtualserverPutVsVipPortHandler virtualserver.PutVsVipPortHandler
	// VirtualserverPutVsVipPortAllowHandler sets the operation handler for the put vs vip port allow operation
	VirtualserverPutVsVipPortAllowHandler virtualserver.PutVsVipPortAllowHandler
	// VirtualserverPutVsVipPortDenyHandler sets the operation handler for the put vs vip port deny operation
	VirtualserverPutVsVipPortDenyHandler virtualserver.PutVsVipPortDenyHandler
	// VirtualserverPutVsVipPortLaddrHandler sets the operation handler for the put vs vip port laddr operation
	VirtualserverPutVsVipPortLaddrHandler virtualserver.PutVsVipPortLaddrHandler
	// VirtualserverPutVsVipPortRsHandler sets the operation handler for the put vs vip port rs operation
	VirtualserverPutVsVipPortRsHandler virtualserver.PutVsVipPortRsHandler
	// VirtualserverPutVsVipPortRsHealthHandler sets the operation handler for the put vs vip port rs health operation
	VirtualserverPutVsVipPortRsHealthHandler virtualserver.PutVsVipPortRsHealthHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *DpvsAgentAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *DpvsAgentAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *DpvsAgentAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *DpvsAgentAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *DpvsAgentAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *DpvsAgentAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *DpvsAgentAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *DpvsAgentAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *DpvsAgentAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the DpvsAgentAPI
func (o *DpvsAgentAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.DeviceDeleteDeviceNameAddrHandler == nil {
		unregistered = append(unregistered, "device.DeleteDeviceNameAddrHandler")
	}
	if o.DeviceDeleteDeviceNameNetlinkHandler == nil {
		unregistered = append(unregistered, "device.DeleteDeviceNameNetlinkHandler")
	}
	if o.DeviceDeleteDeviceNameNetlinkAddrHandler == nil {
		unregistered = append(unregistered, "device.DeleteDeviceNameNetlinkAddrHandler")
	}
	if o.DeviceDeleteDeviceNameRouteHandler == nil {
		unregistered = append(unregistered, "device.DeleteDeviceNameRouteHandler")
	}
	if o.DeviceDeleteDeviceNameVlanHandler == nil {
		unregistered = append(unregistered, "device.DeleteDeviceNameVlanHandler")
	}
	if o.VirtualserverDeleteVsVipPortHandler == nil {
		unregistered = append(unregistered, "virtualserver.DeleteVsVipPortHandler")
	}
	if o.VirtualserverDeleteVsVipPortAllowHandler == nil {
		unregistered = append(unregistered, "virtualserver.DeleteVsVipPortAllowHandler")
	}
	if o.VirtualserverDeleteVsVipPortDenyHandler == nil {
		unregistered = append(unregistered, "virtualserver.DeleteVsVipPortDenyHandler")
	}
	if o.VirtualserverDeleteVsVipPortLaddrHandler == nil {
		unregistered = append(unregistered, "virtualserver.DeleteVsVipPortLaddrHandler")
	}
	if o.VirtualserverDeleteVsVipPortRsHandler == nil {
		unregistered = append(unregistered, "virtualserver.DeleteVsVipPortRsHandler")
	}
	if o.DeviceGetDeviceHandler == nil {
		unregistered = append(unregistered, "device.GetDeviceHandler")
	}
	if o.DeviceGetDeviceNameAddrHandler == nil {
		unregistered = append(unregistered, "device.GetDeviceNameAddrHandler")
	}
	if o.DeviceGetDeviceNameNetlinkHandler == nil {
		unregistered = append(unregistered, "device.GetDeviceNameNetlinkHandler")
	}
	if o.DeviceGetDeviceNameNetlinkAddrHandler == nil {
		unregistered = append(unregistered, "device.GetDeviceNameNetlinkAddrHandler")
	}
	if o.DeviceGetDeviceNameNicHandler == nil {
		unregistered = append(unregistered, "device.GetDeviceNameNicHandler")
	}
	if o.DeviceGetDeviceNameRouteHandler == nil {
		unregistered = append(unregistered, "device.GetDeviceNameRouteHandler")
	}
	if o.DeviceGetDeviceNameVlanHandler == nil {
		unregistered = append(unregistered, "device.GetDeviceNameVlanHandler")
	}
	if o.VirtualserverGetVsHandler == nil {
		unregistered = append(unregistered, "virtualserver.GetVsHandler")
	}
	if o.VirtualserverGetVsVipPortHandler == nil {
		unregistered = append(unregistered, "virtualserver.GetVsVipPortHandler")
	}
	if o.VirtualserverGetVsVipPortAllowHandler == nil {
		unregistered = append(unregistered, "virtualserver.GetVsVipPortAllowHandler")
	}
	if o.VirtualserverGetVsVipPortDenyHandler == nil {
		unregistered = append(unregistered, "virtualserver.GetVsVipPortDenyHandler")
	}
	if o.VirtualserverGetVsVipPortLaddrHandler == nil {
		unregistered = append(unregistered, "virtualserver.GetVsVipPortLaddrHandler")
	}
	if o.VirtualserverGetVsVipPortRsHandler == nil {
		unregistered = append(unregistered, "virtualserver.GetVsVipPortRsHandler")
	}
	if o.VirtualserverPostVsVipPortAllowHandler == nil {
		unregistered = append(unregistered, "virtualserver.PostVsVipPortAllowHandler")
	}
	if o.VirtualserverPostVsVipPortDenyHandler == nil {
		unregistered = append(unregistered, "virtualserver.PostVsVipPortDenyHandler")
	}
	if o.VirtualserverPostVsVipPortRsHandler == nil {
		unregistered = append(unregistered, "virtualserver.PostVsVipPortRsHandler")
	}
	if o.DevicePutDeviceNameAddrHandler == nil {
		unregistered = append(unregistered, "device.PutDeviceNameAddrHandler")
	}
	if o.DevicePutDeviceNameNetlinkHandler == nil {
		unregistered = append(unregistered, "device.PutDeviceNameNetlinkHandler")
	}
	if o.DevicePutDeviceNameNetlinkAddrHandler == nil {
		unregistered = append(unregistered, "device.PutDeviceNameNetlinkAddrHandler")
	}
	if o.DevicePutDeviceNameNicHandler == nil {
		unregistered = append(unregistered, "device.PutDeviceNameNicHandler")
	}
	if o.DevicePutDeviceNameRouteHandler == nil {
		unregistered = append(unregistered, "device.PutDeviceNameRouteHandler")
	}
	if o.DevicePutDeviceNameVlanHandler == nil {
		unregistered = append(unregistered, "device.PutDeviceNameVlanHandler")
	}
	if o.VirtualserverPutVsVipPortHandler == nil {
		unregistered = append(unregistered, "virtualserver.PutVsVipPortHandler")
	}
	if o.VirtualserverPutVsVipPortAllowHandler == nil {
		unregistered = append(unregistered, "virtualserver.PutVsVipPortAllowHandler")
	}
	if o.VirtualserverPutVsVipPortDenyHandler == nil {
		unregistered = append(unregistered, "virtualserver.PutVsVipPortDenyHandler")
	}
	if o.VirtualserverPutVsVipPortLaddrHandler == nil {
		unregistered = append(unregistered, "virtualserver.PutVsVipPortLaddrHandler")
	}
	if o.VirtualserverPutVsVipPortRsHandler == nil {
		unregistered = append(unregistered, "virtualserver.PutVsVipPortRsHandler")
	}
	if o.VirtualserverPutVsVipPortRsHealthHandler == nil {
		unregistered = append(unregistered, "virtualserver.PutVsVipPortRsHealthHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *DpvsAgentAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *DpvsAgentAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *DpvsAgentAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *DpvsAgentAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *DpvsAgentAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *DpvsAgentAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the dpvs agent API
func (o *DpvsAgentAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *DpvsAgentAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/device/{name}/addr"] = device.NewDeleteDeviceNameAddr(o.context, o.DeviceDeleteDeviceNameAddrHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/device/{name}/netlink"] = device.NewDeleteDeviceNameNetlink(o.context, o.DeviceDeleteDeviceNameNetlinkHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/device/{name}/netlink/addr"] = device.NewDeleteDeviceNameNetlinkAddr(o.context, o.DeviceDeleteDeviceNameNetlinkAddrHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/device/{name}/route"] = device.NewDeleteDeviceNameRoute(o.context, o.DeviceDeleteDeviceNameRouteHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/device/{name}/vlan"] = device.NewDeleteDeviceNameVlan(o.context, o.DeviceDeleteDeviceNameVlanHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/vs/{VipPort}"] = virtualserver.NewDeleteVsVipPort(o.context, o.VirtualserverDeleteVsVipPortHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/vs/{VipPort}/allow"] = virtualserver.NewDeleteVsVipPortAllow(o.context, o.VirtualserverDeleteVsVipPortAllowHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/vs/{VipPort}/deny"] = virtualserver.NewDeleteVsVipPortDeny(o.context, o.VirtualserverDeleteVsVipPortDenyHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/vs/{VipPort}/laddr"] = virtualserver.NewDeleteVsVipPortLaddr(o.context, o.VirtualserverDeleteVsVipPortLaddrHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/vs/{VipPort}/rs"] = virtualserver.NewDeleteVsVipPortRs(o.context, o.VirtualserverDeleteVsVipPortRsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/device"] = device.NewGetDevice(o.context, o.DeviceGetDeviceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/device/{name}/addr"] = device.NewGetDeviceNameAddr(o.context, o.DeviceGetDeviceNameAddrHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/device/{name}/netlink"] = device.NewGetDeviceNameNetlink(o.context, o.DeviceGetDeviceNameNetlinkHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/device/{name}/netlink/addr"] = device.NewGetDeviceNameNetlinkAddr(o.context, o.DeviceGetDeviceNameNetlinkAddrHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/device/{name}/nic"] = device.NewGetDeviceNameNic(o.context, o.DeviceGetDeviceNameNicHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/device/{name}/route"] = device.NewGetDeviceNameRoute(o.context, o.DeviceGetDeviceNameRouteHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/device/{name}/vlan"] = device.NewGetDeviceNameVlan(o.context, o.DeviceGetDeviceNameVlanHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/vs"] = virtualserver.NewGetVs(o.context, o.VirtualserverGetVsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/vs/{VipPort}"] = virtualserver.NewGetVsVipPort(o.context, o.VirtualserverGetVsVipPortHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/vs/{VipPort}/allow"] = virtualserver.NewGetVsVipPortAllow(o.context, o.VirtualserverGetVsVipPortAllowHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/vs/{VipPort}/deny"] = virtualserver.NewGetVsVipPortDeny(o.context, o.VirtualserverGetVsVipPortDenyHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/vs/{VipPort}/laddr"] = virtualserver.NewGetVsVipPortLaddr(o.context, o.VirtualserverGetVsVipPortLaddrHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/vs/{VipPort}/rs"] = virtualserver.NewGetVsVipPortRs(o.context, o.VirtualserverGetVsVipPortRsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/vs/{VipPort}/allow"] = virtualserver.NewPostVsVipPortAllow(o.context, o.VirtualserverPostVsVipPortAllowHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/vs/{VipPort}/deny"] = virtualserver.NewPostVsVipPortDeny(o.context, o.VirtualserverPostVsVipPortDenyHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/vs/{VipPort}/rs"] = virtualserver.NewPostVsVipPortRs(o.context, o.VirtualserverPostVsVipPortRsHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/device/{name}/addr"] = device.NewPutDeviceNameAddr(o.context, o.DevicePutDeviceNameAddrHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/device/{name}/netlink"] = device.NewPutDeviceNameNetlink(o.context, o.DevicePutDeviceNameNetlinkHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/device/{name}/netlink/addr"] = device.NewPutDeviceNameNetlinkAddr(o.context, o.DevicePutDeviceNameNetlinkAddrHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/device/{name}/nic"] = device.NewPutDeviceNameNic(o.context, o.DevicePutDeviceNameNicHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/device/{name}/route"] = device.NewPutDeviceNameRoute(o.context, o.DevicePutDeviceNameRouteHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/device/{name}/vlan"] = device.NewPutDeviceNameVlan(o.context, o.DevicePutDeviceNameVlanHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/vs/{VipPort}"] = virtualserver.NewPutVsVipPort(o.context, o.VirtualserverPutVsVipPortHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/vs/{VipPort}/allow"] = virtualserver.NewPutVsVipPortAllow(o.context, o.VirtualserverPutVsVipPortAllowHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/vs/{VipPort}/deny"] = virtualserver.NewPutVsVipPortDeny(o.context, o.VirtualserverPutVsVipPortDenyHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/vs/{VipPort}/laddr"] = virtualserver.NewPutVsVipPortLaddr(o.context, o.VirtualserverPutVsVipPortLaddrHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/vs/{VipPort}/rs"] = virtualserver.NewPutVsVipPortRs(o.context, o.VirtualserverPutVsVipPortRsHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/vs/{VipPort}/rs/health"] = virtualserver.NewPutVsVipPortRsHealth(o.context, o.VirtualserverPutVsVipPortRsHealthHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *DpvsAgentAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *DpvsAgentAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *DpvsAgentAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *DpvsAgentAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *DpvsAgentAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
