// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "dpvs agent api",
    "title": "dpvs agent",
    "version": "1.0.0"
  },
  "host": "petstore.swagger.io",
  "basePath": "/v2",
  "paths": {
    "/device": {
      "get": {
        "tags": [
          "device"
        ],
        "summary": "display all net device list",
        "parameters": [
          {
            "$ref": "#/parameters/stats"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/device/{name}/addr": {
      "get": {
        "tags": [
          "device"
        ],
        "summary": "display special net device ip addr",
        "parameters": [
          {
            "$ref": "#/parameters/stats"
          },
          {
            "$ref": "#/parameters/verbose"
          },
          {
            "$ref": "#/parameters/device-name"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "device"
        ],
        "summary": "add/update special net device ip addr",
        "parameters": [
          {
            "$ref": "#/parameters/sapool"
          },
          {
            "$ref": "#/parameters/device-name"
          },
          {
            "$ref": "#/parameters/device-addr"
          }
        ],
        "responses": {
          "200": {
            "description": "Update exist ip addr Success",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Add new ip addr Success",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Failed",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "device"
        ],
        "summary": "delete special net device ip addr",
        "parameters": [
          {
            "$ref": "#/parameters/sapool"
          },
          {
            "$ref": "#/parameters/device-name"
          },
          {
            "$ref": "#/parameters/device-addr"
          }
        ],
        "responses": {
          "200": {
            "description": "delete ip addr from device Success",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Failed",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/device/{name}/netlink": {
      "get": {
        "tags": [
          "device"
        ],
        "summary": "ip link show dev ${name}",
        "parameters": [
          {
            "$ref": "#/parameters/device-name"
          },
          {
            "$ref": "#/parameters/stats"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "device"
        ],
        "summary": "ip link set ${name} up",
        "parameters": [
          {
            "$ref": "#/parameters/device-name"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Not Found",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "device"
        ],
        "summary": "ip link set ${name} down",
        "parameters": [
          {
            "$ref": "#/parameters/device-name"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Not Found",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/device/{name}/netlink/addr": {
      "get": {
        "tags": [
          "device"
        ],
        "summary": "ip addr show lo: Display special linux net device addr detail",
        "parameters": [
          {
            "$ref": "#/parameters/device-name"
          },
          {
            "$ref": "#/parameters/stats"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "device"
        ],
        "summary": "ip addr add 10.0.0.1/32 dev eth0: Set ip cird to linux net device",
        "parameters": [
          {
            "$ref": "#/parameters/device-name"
          },
          {
            "$ref": "#/parameters/device-addr"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Not Found",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "device"
        ],
        "summary": "ip addr del 10.0.0.1/32 dev eth0: Delete ip cird fron linux net device",
        "parameters": [
          {
            "$ref": "#/parameters/device-name"
          },
          {
            "$ref": "#/parameters/device-addr"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Not Found",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/device/{name}/nic": {
      "get": {
        "tags": [
          "device"
        ],
        "summary": "dpip link show ${nic-name} -s -v",
        "parameters": [
          {
            "$ref": "#/parameters/device-name"
          },
          {
            "$ref": "#/parameters/verbose"
          },
          {
            "$ref": "#/parameters/stats"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/NicDeviceSpecList"
            }
          },
          "500": {
            "description": "Failure",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "device"
        ],
        "summary": "dpip link set ${nic-name} [forward2kni,link,promisc,tc-ingress,tc-egress] [on/up,off/down]",
        "parameters": [
          {
            "$ref": "#/parameters/device-name"
          },
          {
            "$ref": "#/parameters/forward2kni"
          },
          {
            "$ref": "#/parameters/link"
          },
          {
            "$ref": "#/parameters/promisc"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Failure",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/device/{name}/route": {
      "get": {
        "tags": [
          "device"
        ],
        "summary": "display special net device route",
        "parameters": [
          {
            "$ref": "#/parameters/stats"
          },
          {
            "$ref": "#/parameters/device-name"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "device"
        ],
        "summary": "add/update special net device route",
        "parameters": [
          {
            "$ref": "#/parameters/device-name"
          },
          {
            "$ref": "#/parameters/route-config"
          }
        ],
        "responses": {
          "200": {
            "description": "Update exist route Success",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Add new route Success",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Failed",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "device"
        ],
        "summary": "delete special net device route",
        "parameters": [
          {
            "$ref": "#/parameters/device-name"
          },
          {
            "$ref": "#/parameters/route-config"
          }
        ],
        "responses": {
          "200": {
            "description": "delete route Success",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Failed",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/device/{name}/vlan": {
      "get": {
        "tags": [
          "device"
        ],
        "summary": "display all net device list",
        "parameters": [
          {
            "$ref": "#/parameters/device-name"
          },
          {
            "$ref": "#/parameters/stats"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "device"
        ],
        "summary": "add/update special net device ",
        "parameters": [
          {
            "$ref": "#/parameters/device-name"
          },
          {
            "$ref": "#/parameters/vlan-config"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Failed",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "device"
        ],
        "summary": "delete special net device",
        "parameters": [
          {
            "$ref": "#/parameters/device-name"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Failed",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/vs": {
      "get": {
        "tags": [
          "virtualserver"
        ],
        "summary": "display all vip:port:proto and rsip:port list",
        "parameters": [
          {
            "$ref": "#/parameters/stats"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VirtualServerList"
            }
          }
        }
      }
    },
    "/vs/{VipPort}": {
      "get": {
        "tags": [
          "virtualserver"
        ],
        "summary": "get a specific virtual server",
        "parameters": [
          {
            "$ref": "#/parameters/service-id"
          },
          {
            "$ref": "#/parameters/stats"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VirtualServerList"
            }
          },
          "404": {
            "description": "Service not found",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "virtualserver"
        ],
        "summary": "create or update virtual server",
        "parameters": [
          {
            "$ref": "#/parameters/service-id"
          },
          {
            "$ref": "#/parameters/vs-config"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "type": "string"
            }
          },
          "460": {
            "description": "Invalid frontend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidFrontend"
          },
          "461": {
            "description": "Invalid backend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidBackend"
          },
          "500": {
            "description": "Error while creating virtual server",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      },
      "delete": {
        "tags": [
          "virtualserver"
        ],
        "summary": "Delete a vip:port:proto",
        "parameters": [
          {
            "$ref": "#/parameters/service-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Service not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Service deletion failed",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      }
    },
    "/vs/{VipPort}/allow": {
      "get": {
        "tags": [
          "virtualserver"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/service-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Service not found",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "virtualserver"
        ],
        "summary": "Add a set of ip from white list to vip:port:proto",
        "parameters": [
          {
            "$ref": "#/parameters/service-id"
          },
          {
            "$ref": "#/parameters/acl-config"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "type": "string"
            }
          },
          "460": {
            "description": "Invalid frontend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidFrontend"
          },
          "461": {
            "description": "Invalid backend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidBackend"
          },
          "500": {
            "description": "Service deletion failed",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      },
      "post": {
        "tags": [
          "virtualserver"
        ],
        "summary": "Update a fully white ip list to vip:port:proto",
        "parameters": [
          {
            "$ref": "#/parameters/service-id"
          },
          {
            "$ref": "#/parameters/acl-config"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "type": "string"
            }
          },
          "460": {
            "description": "Invalid frontend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidFrontend"
          },
          "461": {
            "description": "Invalid backend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidBackend"
          },
          "500": {
            "description": "Service deletion failed",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      },
      "delete": {
        "tags": [
          "virtualserver"
        ],
        "summary": "Delete a set of ip form white list to vip:port:proto",
        "parameters": [
          {
            "$ref": "#/parameters/service-id"
          },
          {
            "$ref": "#/parameters/acl-config"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Service not found",
            "schema": {
              "type": "string"
            }
          },
          "460": {
            "description": "Invalid frontend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidFrontend"
          },
          "461": {
            "description": "Invalid backend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidBackend"
          },
          "500": {
            "description": "Service deletion failed",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      }
    },
    "/vs/{VipPort}/deny": {
      "get": {
        "tags": [
          "virtualserver"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/service-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Service not found",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "virtualserver"
        ],
        "summary": "Add a set of ip from black list to vip:port:proto",
        "parameters": [
          {
            "$ref": "#/parameters/service-id"
          },
          {
            "$ref": "#/parameters/acl-config"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "type": "string"
            }
          },
          "460": {
            "description": "Invalid frontend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidFrontend"
          },
          "461": {
            "description": "Invalid backend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidBackend"
          },
          "500": {
            "description": "Service deletion failed",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      },
      "post": {
        "tags": [
          "virtualserver"
        ],
        "summary": "Update a fully black ip list to vip:port:proto",
        "parameters": [
          {
            "$ref": "#/parameters/service-id"
          },
          {
            "$ref": "#/parameters/acl-config"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "type": "string"
            }
          },
          "460": {
            "description": "Invalid frontend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidFrontend"
          },
          "461": {
            "description": "Invalid backend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidBackend"
          },
          "500": {
            "description": "Service deletion failed",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      },
      "delete": {
        "tags": [
          "virtualserver"
        ],
        "summary": "Delete a set of ip form black list to vip:port:proto",
        "parameters": [
          {
            "$ref": "#/parameters/service-id"
          },
          {
            "$ref": "#/parameters/acl-config"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Service not found",
            "schema": {
              "type": "string"
            }
          },
          "460": {
            "description": "Invalid frontend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidFrontend"
          },
          "461": {
            "description": "Invalid backend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidBackend"
          },
          "500": {
            "description": "Service deletion failed",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      }
    },
    "/vs/{VipPort}/laddr": {
      "get": {
        "tags": [
          "virtualserver"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/service-id"
          },
          {
            "$ref": "#/parameters/stats"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LocalAddressExpandList"
            }
          },
          "404": {
            "description": "Service not found",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "virtualserver"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/service-id"
          },
          {
            "$ref": "#/parameters/laddr-config"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "type": "string"
            }
          },
          "460": {
            "description": "Invalid frontend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidFrontend"
          },
          "461": {
            "description": "Invalid backend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidBackend"
          },
          "500": {
            "description": "Error while creating virtual server",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      },
      "delete": {
        "tags": [
          "virtualserver"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/service-id"
          },
          {
            "$ref": "#/parameters/laddr-config"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "460": {
            "description": "Invalid frontend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidFrontend"
          },
          "461": {
            "description": "Invalid backend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidBackend"
          },
          "500": {
            "description": "Error while creating virtual server",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      }
    },
    "/vs/{VipPort}/rs": {
      "get": {
        "tags": [
          "virtualserver"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/service-id"
          },
          {
            "$ref": "#/parameters/stats"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Service not found",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "virtualserver"
        ],
        "summary": "Add a set of real server to vip:port:proto",
        "parameters": [
          {
            "$ref": "#/parameters/service-id"
          },
          {
            "$ref": "#/parameters/rss-config"
          },
          {
            "$ref": "#/parameters/healthcheck"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "type": "string"
            }
          },
          "460": {
            "description": "Invalid frontend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidFrontend"
          },
          "461": {
            "description": "Invalid backend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidBackend"
          },
          "500": {
            "description": "Service deletion failed",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      },
      "post": {
        "tags": [
          "virtualserver"
        ],
        "summary": "Update fully real server list to vip:port:proto",
        "parameters": [
          {
            "$ref": "#/parameters/service-id"
          },
          {
            "$ref": "#/parameters/rss-config"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "type": "string"
            }
          },
          "460": {
            "description": "Invalid frontend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidFrontend"
          },
          "461": {
            "description": "Invalid backend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidBackend"
          },
          "500": {
            "description": "Service deletion failed",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      },
      "delete": {
        "tags": [
          "virtualserver"
        ],
        "summary": "Delete a set of real server from vip:port:proto",
        "parameters": [
          {
            "$ref": "#/parameters/service-id"
          },
          {
            "$ref": "#/parameters/rss-config"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Service not found",
            "schema": {
              "type": "string"
            }
          },
          "460": {
            "description": "Invalid frontend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidFrontend"
          },
          "461": {
            "description": "Invalid backend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidBackend"
          },
          "500": {
            "description": "Service deletion failed",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      }
    }
  },
  "definitions": {
    "AclAddrList": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertAuthSpec"
          }
        }
      }
    },
    "AddrRange": {
      "type": "object",
      "properties": {
        "End": {
          "type": "string"
        },
        "Start": {
          "type": "string"
        }
      }
    },
    "CertAuthSpec": {
      "properties": {
        "addr": {
          "type": "string"
        }
      }
    },
    "DestCheckSpec": {
      "type": "string",
      "enum": [
        "passive",
        "tcp",
        "udp",
        "ping"
      ]
    },
    "Error": {
      "type": "string"
    },
    "InetAddrSpec": {
      "properties": {
        "addr": {
          "type": "string"
        },
        "broadcast": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        }
      }
    },
    "LocalAddressExpandList": {
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LocalAddressSpecExpand"
          }
        }
      }
    },
    "LocalAddressSpecExpand": {
      "type": "object",
      "properties": {
        "addr": {
          "type": "string"
        },
        "af": {
          "type": "integer",
          "format": "uint32"
        },
        "conns": {
          "type": "integer",
          "format": "uint32"
        },
        "device": {
          "type": "string"
        },
        "portConflict": {
          "type": "integer",
          "format": "uint64"
        }
      }
    },
    "LocalAddressSpecTiny": {
      "properties": {
        "addr": {
          "type": "string"
        },
        "device": {
          "type": "string"
        }
      }
    },
    "LocalAddressTinyList": {
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LocalAddressSpecTiny"
          }
        }
      }
    },
    "MatchSpec": {
      "type": "object",
      "properties": {
        "Dest": {
          "$ref": "#/definitions/AddrRange"
        },
        "InIfName": {
          "type": "string"
        },
        "OutIfName": {
          "type": "string"
        },
        "Src": {
          "$ref": "#/definitions/AddrRange"
        }
      }
    },
    "NicDeviceDetail": {
      "type": "object",
      "properties": {
        "Flags": {
          "type": "integer",
          "format": "uint16"
        },
        "ID": {
          "type": "integer",
          "format": "uint16"
        },
        "MTU": {
          "type": "integer",
          "format": "uint16"
        },
        "addr": {
          "type": "string"
        },
        "autoneg": {
          "type": "string",
          "enum": [
            "fixed-nego",
            "auto-nego"
          ]
        },
        "duplex": {
          "type": "string",
          "enum": [
            "half-duplex",
            "full-duplex"
          ]
        },
        "nRxQ": {
          "type": "integer",
          "format": "uint8"
        },
        "nTxQ": {
          "type": "integer",
          "format": "uint8"
        },
        "name": {
          "type": "string"
        },
        "socketID": {
          "type": "integer",
          "format": "uint8"
        },
        "speed": {
          "type": "integer",
          "format": "uint32"
        },
        "status": {
          "type": "string",
          "enum": [
            "UP",
            "DOWN"
          ]
        }
      }
    },
    "NicDeviceQueueData": {
      "type": "integer",
      "format": "uint64"
    },
    "NicDeviceSpec": {
      "type": "object",
      "properties": {
        "detail": {
          "$ref": "#/definitions/NicDeviceDetail"
        },
        "stats": {
          "$ref": "#/definitions/NicDeviceStats"
        }
      }
    },
    "NicDeviceSpecList": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NicDeviceSpec"
          }
        }
      }
    },
    "NicDeviceStats": {
      "type": "object",
      "properties": {
        "bufAvail": {
          "type": "integer",
          "format": "uint32"
        },
        "bufInuse": {
          "type": "integer",
          "format": "uint32"
        },
        "errorBytesQ": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NicDeviceQueueData"
          }
        },
        "id": {
          "type": "integer",
          "format": "uint16"
        },
        "inBytes": {
          "type": "integer",
          "format": "uint64"
        },
        "inBytesQ": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NicDeviceQueueData"
          }
        },
        "inErrors": {
          "type": "integer",
          "format": "uint64"
        },
        "inMissed": {
          "type": "integer",
          "format": "uint64"
        },
        "inPkts": {
          "type": "integer",
          "format": "uint64"
        },
        "inPktsQ": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NicDeviceQueueData"
          }
        },
        "outBytes": {
          "type": "integer",
          "format": "uint64"
        },
        "outBytesQ": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NicDeviceQueueData"
          }
        },
        "outErrors": {
          "type": "integer",
          "format": "uint64"
        },
        "outPkts": {
          "type": "integer",
          "format": "uint64"
        },
        "outPktsQ": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NicDeviceQueueData"
          }
        },
        "rxNoMbuf": {
          "type": "integer",
          "format": "uint64"
        }
      }
    },
    "RealServerExpandList": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RealServerSpecExpand"
          }
        }
      }
    },
    "RealServerSpecExpand": {
      "type": "object",
      "properties": {
        "Spec": {
          "$ref": "#/definitions/RealServerSpecTiny"
        },
        "Stats": {
          "$ref": "#/definitions/ServerStats"
        }
      }
    },
    "RealServerSpecTiny": {
      "type": "object",
      "properties": {
        "inhibited": {
          "type": "boolean",
          "default": false
        },
        "ip": {
          "type": "string"
        },
        "mode": {
          "type": "string",
          "enum": [
            "FNAT",
            "SNAT",
            "DR",
            "TUNNEL",
            "NAT"
          ]
        },
        "overloaded": {
          "type": "boolean",
          "default": false
        },
        "port": {
          "type": "integer",
          "format": "uint16",
          "x-omitempty": false
        },
        "weight": {
          "type": "integer",
          "format": "uint16",
          "x-omitempty": false
        }
      }
    },
    "RealServerTinyList": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RealServerSpecTiny"
          }
        }
      }
    },
    "RouteSpec": {
      "properties": {
        "device": {
          "type": "string"
        },
        "dst": {
          "type": "string"
        },
        "gateway": {
          "type": "string"
        },
        "metric": {
          "type": "integer",
          "format": "uint32"
        },
        "mtu": {
          "type": "integer",
          "format": "uint32"
        },
        "prefixSrc": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        },
        "src": {
          "type": "string"
        }
      }
    },
    "ServerStats": {
      "type": "object",
      "properties": {
        "Conns": {
          "type": "integer",
          "format": "uint64"
        },
        "Cps": {
          "type": "integer",
          "format": "uint32"
        },
        "InBps": {
          "type": "integer",
          "format": "uint32"
        },
        "InBytes": {
          "type": "integer",
          "format": "uint64"
        },
        "InPkts": {
          "type": "integer",
          "format": "uint64"
        },
        "InPps": {
          "type": "integer",
          "format": "uint32"
        },
        "OutBps": {
          "type": "integer",
          "format": "uint32"
        },
        "OutBytes": {
          "type": "integer",
          "format": "uint64"
        },
        "OutPkts": {
          "type": "integer",
          "format": "uint64"
        },
        "OutPps": {
          "type": "integer",
          "format": "uint32"
        }
      }
    },
    "Status": {
      "description": "Status of an individual component",
      "type": "object",
      "properties": {
        "msg": {
          "description": "Human readable status/error/warning message",
          "type": "string"
        },
        "state": {
          "description": "State the component is in",
          "type": "string",
          "enum": [
            "Ok",
            "Warning",
            "Failure",
            "Disabled"
          ]
        }
      }
    },
    "VirtualServerList": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualServerSpecExpand"
          }
        }
      }
    },
    "VirtualServerSpecExpand": {
      "type": "object",
      "properties": {
        "Addr": {
          "type": "string"
        },
        "Af": {
          "type": "integer",
          "format": "uint32"
        },
        "Bps": {
          "type": "integer",
          "format": "uint32"
        },
        "ConnTimeout": {
          "type": "integer",
          "format": "uint32"
        },
        "DestCheck": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DestCheckSpec"
          }
        },
        "ExpireQuiescent": {
          "type": "string",
          "enum": [
            "true",
            "false"
          ]
        },
        "Flags": {
          "type": "string"
        },
        "Fwmark": {
          "type": "integer",
          "format": "uint32"
        },
        "LimitProportion": {
          "type": "integer",
          "format": "uint32"
        },
        "Match": {
          "$ref": "#/definitions/MatchSpec"
        },
        "Netmask": {
          "type": "integer",
          "format": "uint32"
        },
        "Port": {
          "type": "integer",
          "format": "uint16"
        },
        "Proto": {
          "type": "integer",
          "format": "uint8"
        },
        "ProxyProto": {
          "type": "integer",
          "format": "uint8"
        },
        "RSs": {
          "$ref": "#/definitions/RealServerExpandList"
        },
        "SchedName": {
          "type": "string",
          "enum": [
            "rr",
            "wrr",
            "wlc",
            "conhash"
          ]
        },
        "Stats": {
          "$ref": "#/definitions/ServerStats"
        },
        "SynProxy": {
          "type": "string",
          "enum": [
            "true",
            "false"
          ]
        },
        "Timeout": {
          "type": "integer",
          "format": "uint32"
        }
      }
    },
    "VirtualServerSpecTiny": {
      "type": "object",
      "properties": {
        "Bps": {
          "type": "integer",
          "format": "uint32"
        },
        "ConnTimeout": {
          "type": "integer",
          "format": "uint32"
        },
        "ExpireQuiescent": {
          "type": "boolean",
          "default": false
        },
        "Fwmark": {
          "type": "integer",
          "format": "uint32"
        },
        "LimitProportion": {
          "type": "integer",
          "format": "uint32"
        },
        "Match": {
          "$ref": "#/definitions/MatchSpec"
        },
        "ProxyProtocol": {
          "type": "string",
          "enum": [
            "v2",
            "v1",
            "disable"
          ]
        },
        "SchedName": {
          "type": "string",
          "enum": [
            "rr",
            "wrr",
            "wlc",
            "conhash"
          ]
        },
        "SynProxy": {
          "type": "boolean",
          "default": false
        },
        "Timeout": {
          "type": "integer",
          "format": "uint32"
        }
      }
    },
    "VlanSpec": {
      "properties": {
        "device": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "acl-config": {
      "name": "acl",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/AclAddrList"
      }
    },
    "device-addr": {
      "name": "spec",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/InetAddrSpec"
      }
    },
    "device-name": {
      "type": "string",
      "name": "name",
      "in": "path",
      "required": true
    },
    "forward2kni": {
      "enum": [
        "unset",
        "on",
        "off"
      ],
      "type": "string",
      "default": "unset",
      "name": "forward2Kni",
      "in": "query"
    },
    "healthcheck": {
      "type": "boolean",
      "default": false,
      "name": "healthcheck",
      "in": "query"
    },
    "laddr-config": {
      "name": "spec",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/LocalAddressSpecTiny"
      }
    },
    "link": {
      "enum": [
        "unset",
        "up",
        "down"
      ],
      "type": "string",
      "default": "unset",
      "name": "link",
      "in": "query"
    },
    "promisc": {
      "enum": [
        "unset",
        "on",
        "off"
      ],
      "type": "string",
      "default": "unset",
      "name": "promisc",
      "in": "query"
    },
    "realserver-id": {
      "type": "string",
      "name": "RipPort",
      "in": "path",
      "required": true
    },
    "route-config": {
      "name": "spec",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/RouteSpec"
      }
    },
    "rs-config": {
      "name": "spec",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/RealServerSpecTiny"
      }
    },
    "rss-config": {
      "name": "rss",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/RealServerTinyList"
      }
    },
    "sapool": {
      "type": "boolean",
      "default": false,
      "name": "sapool",
      "in": "query"
    },
    "service-id": {
      "type": "string",
      "name": "VipPort",
      "in": "path",
      "required": true
    },
    "stats": {
      "type": "boolean",
      "default": false,
      "name": "stats",
      "in": "query"
    },
    "verbose": {
      "type": "boolean",
      "default": false,
      "name": "verbose",
      "in": "query"
    },
    "vlan-config": {
      "name": "spec",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/VlanSpec"
      }
    },
    "vs-config": {
      "name": "spec",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/VirtualServerSpecTiny"
      }
    }
  },
  "tags": [
    {
      "description": "virtualserver",
      "name": "virtualserver"
    },
    {
      "description": "route",
      "name": "route"
    },
    {
      "description": "laddr",
      "name": "laddr"
    },
    {
      "description": "tunnel",
      "name": "tunnel"
    },
    {
      "description": "inet addr",
      "name": "inetaddr"
    },
    {
      "description": "white list",
      "name": "white_list"
    },
    {
      "description": "black list",
      "name": "black_list"
    },
    {
      "description": "arp",
      "name": "arp"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "dpvs agent api",
    "title": "dpvs agent",
    "version": "1.0.0"
  },
  "host": "petstore.swagger.io",
  "basePath": "/v2",
  "paths": {
    "/device": {
      "get": {
        "tags": [
          "device"
        ],
        "summary": "display all net device list",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "name": "stats",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/device/{name}/addr": {
      "get": {
        "tags": [
          "device"
        ],
        "summary": "display special net device ip addr",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "name": "stats",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "verbose",
            "in": "query"
          },
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "device"
        ],
        "summary": "add/update special net device ip addr",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "name": "sapool",
            "in": "query"
          },
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "spec",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/InetAddrSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update exist ip addr Success",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Add new ip addr Success",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Failed",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "device"
        ],
        "summary": "delete special net device ip addr",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "name": "sapool",
            "in": "query"
          },
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "spec",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/InetAddrSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "delete ip addr from device Success",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Failed",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/device/{name}/netlink": {
      "get": {
        "tags": [
          "device"
        ],
        "summary": "ip link show dev ${name}",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "name": "stats",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "device"
        ],
        "summary": "ip link set ${name} up",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Not Found",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "device"
        ],
        "summary": "ip link set ${name} down",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Not Found",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/device/{name}/netlink/addr": {
      "get": {
        "tags": [
          "device"
        ],
        "summary": "ip addr show lo: Display special linux net device addr detail",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "name": "stats",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "device"
        ],
        "summary": "ip addr add 10.0.0.1/32 dev eth0: Set ip cird to linux net device",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "spec",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/InetAddrSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Not Found",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "device"
        ],
        "summary": "ip addr del 10.0.0.1/32 dev eth0: Delete ip cird fron linux net device",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "spec",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/InetAddrSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Not Found",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/device/{name}/nic": {
      "get": {
        "tags": [
          "device"
        ],
        "summary": "dpip link show ${nic-name} -s -v",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "name": "verbose",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "stats",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/NicDeviceSpecList"
            }
          },
          "500": {
            "description": "Failure",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "device"
        ],
        "summary": "dpip link set ${nic-name} [forward2kni,link,promisc,tc-ingress,tc-egress] [on/up,off/down]",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "unset",
              "on",
              "off"
            ],
            "type": "string",
            "default": "unset",
            "name": "forward2Kni",
            "in": "query"
          },
          {
            "enum": [
              "unset",
              "up",
              "down"
            ],
            "type": "string",
            "default": "unset",
            "name": "link",
            "in": "query"
          },
          {
            "enum": [
              "unset",
              "on",
              "off"
            ],
            "type": "string",
            "default": "unset",
            "name": "promisc",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Failure",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/device/{name}/route": {
      "get": {
        "tags": [
          "device"
        ],
        "summary": "display special net device route",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "name": "stats",
            "in": "query"
          },
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "device"
        ],
        "summary": "add/update special net device route",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "spec",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RouteSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update exist route Success",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Add new route Success",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Failed",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "device"
        ],
        "summary": "delete special net device route",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "spec",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RouteSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "delete route Success",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Failed",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/device/{name}/vlan": {
      "get": {
        "tags": [
          "device"
        ],
        "summary": "display all net device list",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "name": "stats",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "device"
        ],
        "summary": "add/update special net device ",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "spec",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/VlanSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Failed",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "device"
        ],
        "summary": "delete special net device",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Failed",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/vs": {
      "get": {
        "tags": [
          "virtualserver"
        ],
        "summary": "display all vip:port:proto and rsip:port list",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "name": "stats",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VirtualServerList"
            }
          }
        }
      }
    },
    "/vs/{VipPort}": {
      "get": {
        "tags": [
          "virtualserver"
        ],
        "summary": "get a specific virtual server",
        "parameters": [
          {
            "type": "string",
            "name": "VipPort",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "name": "stats",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VirtualServerList"
            }
          },
          "404": {
            "description": "Service not found",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "virtualserver"
        ],
        "summary": "create or update virtual server",
        "parameters": [
          {
            "type": "string",
            "name": "VipPort",
            "in": "path",
            "required": true
          },
          {
            "name": "spec",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/VirtualServerSpecTiny"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "type": "string"
            }
          },
          "460": {
            "description": "Invalid frontend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidFrontend"
          },
          "461": {
            "description": "Invalid backend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidBackend"
          },
          "500": {
            "description": "Error while creating virtual server",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      },
      "delete": {
        "tags": [
          "virtualserver"
        ],
        "summary": "Delete a vip:port:proto",
        "parameters": [
          {
            "type": "string",
            "name": "VipPort",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Service not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Service deletion failed",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      }
    },
    "/vs/{VipPort}/allow": {
      "get": {
        "tags": [
          "virtualserver"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "VipPort",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Service not found",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "virtualserver"
        ],
        "summary": "Add a set of ip from white list to vip:port:proto",
        "parameters": [
          {
            "type": "string",
            "name": "VipPort",
            "in": "path",
            "required": true
          },
          {
            "name": "acl",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AclAddrList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "type": "string"
            }
          },
          "460": {
            "description": "Invalid frontend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidFrontend"
          },
          "461": {
            "description": "Invalid backend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidBackend"
          },
          "500": {
            "description": "Service deletion failed",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      },
      "post": {
        "tags": [
          "virtualserver"
        ],
        "summary": "Update a fully white ip list to vip:port:proto",
        "parameters": [
          {
            "type": "string",
            "name": "VipPort",
            "in": "path",
            "required": true
          },
          {
            "name": "acl",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AclAddrList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "type": "string"
            }
          },
          "460": {
            "description": "Invalid frontend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidFrontend"
          },
          "461": {
            "description": "Invalid backend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidBackend"
          },
          "500": {
            "description": "Service deletion failed",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      },
      "delete": {
        "tags": [
          "virtualserver"
        ],
        "summary": "Delete a set of ip form white list to vip:port:proto",
        "parameters": [
          {
            "type": "string",
            "name": "VipPort",
            "in": "path",
            "required": true
          },
          {
            "name": "acl",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AclAddrList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Service not found",
            "schema": {
              "type": "string"
            }
          },
          "460": {
            "description": "Invalid frontend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidFrontend"
          },
          "461": {
            "description": "Invalid backend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidBackend"
          },
          "500": {
            "description": "Service deletion failed",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      }
    },
    "/vs/{VipPort}/deny": {
      "get": {
        "tags": [
          "virtualserver"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "VipPort",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Service not found",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "virtualserver"
        ],
        "summary": "Add a set of ip from black list to vip:port:proto",
        "parameters": [
          {
            "type": "string",
            "name": "VipPort",
            "in": "path",
            "required": true
          },
          {
            "name": "acl",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AclAddrList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "type": "string"
            }
          },
          "460": {
            "description": "Invalid frontend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidFrontend"
          },
          "461": {
            "description": "Invalid backend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidBackend"
          },
          "500": {
            "description": "Service deletion failed",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      },
      "post": {
        "tags": [
          "virtualserver"
        ],
        "summary": "Update a fully black ip list to vip:port:proto",
        "parameters": [
          {
            "type": "string",
            "name": "VipPort",
            "in": "path",
            "required": true
          },
          {
            "name": "acl",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AclAddrList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "type": "string"
            }
          },
          "460": {
            "description": "Invalid frontend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidFrontend"
          },
          "461": {
            "description": "Invalid backend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidBackend"
          },
          "500": {
            "description": "Service deletion failed",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      },
      "delete": {
        "tags": [
          "virtualserver"
        ],
        "summary": "Delete a set of ip form black list to vip:port:proto",
        "parameters": [
          {
            "type": "string",
            "name": "VipPort",
            "in": "path",
            "required": true
          },
          {
            "name": "acl",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AclAddrList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Service not found",
            "schema": {
              "type": "string"
            }
          },
          "460": {
            "description": "Invalid frontend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidFrontend"
          },
          "461": {
            "description": "Invalid backend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidBackend"
          },
          "500": {
            "description": "Service deletion failed",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      }
    },
    "/vs/{VipPort}/laddr": {
      "get": {
        "tags": [
          "virtualserver"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "VipPort",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "name": "stats",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LocalAddressExpandList"
            }
          },
          "404": {
            "description": "Service not found",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "virtualserver"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "VipPort",
            "in": "path",
            "required": true
          },
          {
            "name": "spec",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/LocalAddressSpecTiny"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "type": "string"
            }
          },
          "460": {
            "description": "Invalid frontend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidFrontend"
          },
          "461": {
            "description": "Invalid backend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidBackend"
          },
          "500": {
            "description": "Error while creating virtual server",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      },
      "delete": {
        "tags": [
          "virtualserver"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "VipPort",
            "in": "path",
            "required": true
          },
          {
            "name": "spec",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/LocalAddressSpecTiny"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "460": {
            "description": "Invalid frontend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidFrontend"
          },
          "461": {
            "description": "Invalid backend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidBackend"
          },
          "500": {
            "description": "Error while creating virtual server",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      }
    },
    "/vs/{VipPort}/rs": {
      "get": {
        "tags": [
          "virtualserver"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "VipPort",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "name": "stats",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Service not found",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "virtualserver"
        ],
        "summary": "Add a set of real server to vip:port:proto",
        "parameters": [
          {
            "type": "string",
            "name": "VipPort",
            "in": "path",
            "required": true
          },
          {
            "name": "rss",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RealServerTinyList"
            }
          },
          {
            "type": "boolean",
            "default": false,
            "name": "healthcheck",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "type": "string"
            }
          },
          "460": {
            "description": "Invalid frontend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidFrontend"
          },
          "461": {
            "description": "Invalid backend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidBackend"
          },
          "500": {
            "description": "Service deletion failed",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      },
      "post": {
        "tags": [
          "virtualserver"
        ],
        "summary": "Update fully real server list to vip:port:proto",
        "parameters": [
          {
            "type": "string",
            "name": "VipPort",
            "in": "path",
            "required": true
          },
          {
            "name": "rss",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RealServerTinyList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "type": "string"
            }
          },
          "460": {
            "description": "Invalid frontend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidFrontend"
          },
          "461": {
            "description": "Invalid backend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidBackend"
          },
          "500": {
            "description": "Service deletion failed",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      },
      "delete": {
        "tags": [
          "virtualserver"
        ],
        "summary": "Delete a set of real server from vip:port:proto",
        "parameters": [
          {
            "type": "string",
            "name": "VipPort",
            "in": "path",
            "required": true
          },
          {
            "name": "rss",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RealServerTinyList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Service not found",
            "schema": {
              "type": "string"
            }
          },
          "460": {
            "description": "Invalid frontend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidFrontend"
          },
          "461": {
            "description": "Invalid backend in service configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "InvalidBackend"
          },
          "500": {
            "description": "Service deletion failed",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "x-go-name": "Failure"
          }
        }
      }
    }
  },
  "definitions": {
    "AclAddrList": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertAuthSpec"
          }
        }
      }
    },
    "AddrRange": {
      "type": "object",
      "properties": {
        "End": {
          "type": "string"
        },
        "Start": {
          "type": "string"
        }
      }
    },
    "CertAuthSpec": {
      "properties": {
        "addr": {
          "type": "string"
        }
      }
    },
    "DestCheckSpec": {
      "type": "string",
      "enum": [
        "passive",
        "tcp",
        "udp",
        "ping"
      ]
    },
    "Error": {
      "type": "string"
    },
    "InetAddrSpec": {
      "properties": {
        "addr": {
          "type": "string"
        },
        "broadcast": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        }
      }
    },
    "LocalAddressExpandList": {
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LocalAddressSpecExpand"
          }
        }
      }
    },
    "LocalAddressSpecExpand": {
      "type": "object",
      "properties": {
        "addr": {
          "type": "string"
        },
        "af": {
          "type": "integer",
          "format": "uint32"
        },
        "conns": {
          "type": "integer",
          "format": "uint32"
        },
        "device": {
          "type": "string"
        },
        "portConflict": {
          "type": "integer",
          "format": "uint64"
        }
      }
    },
    "LocalAddressSpecTiny": {
      "properties": {
        "addr": {
          "type": "string"
        },
        "device": {
          "type": "string"
        }
      }
    },
    "LocalAddressTinyList": {
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LocalAddressSpecTiny"
          }
        }
      }
    },
    "MatchSpec": {
      "type": "object",
      "properties": {
        "Dest": {
          "$ref": "#/definitions/AddrRange"
        },
        "InIfName": {
          "type": "string"
        },
        "OutIfName": {
          "type": "string"
        },
        "Src": {
          "$ref": "#/definitions/AddrRange"
        }
      }
    },
    "NicDeviceDetail": {
      "type": "object",
      "properties": {
        "Flags": {
          "type": "integer",
          "format": "uint16"
        },
        "ID": {
          "type": "integer",
          "format": "uint16"
        },
        "MTU": {
          "type": "integer",
          "format": "uint16"
        },
        "addr": {
          "type": "string"
        },
        "autoneg": {
          "type": "string",
          "enum": [
            "fixed-nego",
            "auto-nego"
          ]
        },
        "duplex": {
          "type": "string",
          "enum": [
            "half-duplex",
            "full-duplex"
          ]
        },
        "nRxQ": {
          "type": "integer",
          "format": "uint8"
        },
        "nTxQ": {
          "type": "integer",
          "format": "uint8"
        },
        "name": {
          "type": "string"
        },
        "socketID": {
          "type": "integer",
          "format": "uint8"
        },
        "speed": {
          "type": "integer",
          "format": "uint32"
        },
        "status": {
          "type": "string",
          "enum": [
            "UP",
            "DOWN"
          ]
        }
      }
    },
    "NicDeviceQueueData": {
      "type": "integer",
      "format": "uint64"
    },
    "NicDeviceSpec": {
      "type": "object",
      "properties": {
        "detail": {
          "$ref": "#/definitions/NicDeviceDetail"
        },
        "stats": {
          "$ref": "#/definitions/NicDeviceStats"
        }
      }
    },
    "NicDeviceSpecList": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NicDeviceSpec"
          }
        }
      }
    },
    "NicDeviceStats": {
      "type": "object",
      "properties": {
        "bufAvail": {
          "type": "integer",
          "format": "uint32"
        },
        "bufInuse": {
          "type": "integer",
          "format": "uint32"
        },
        "errorBytesQ": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NicDeviceQueueData"
          }
        },
        "id": {
          "type": "integer",
          "format": "uint16"
        },
        "inBytes": {
          "type": "integer",
          "format": "uint64"
        },
        "inBytesQ": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NicDeviceQueueData"
          }
        },
        "inErrors": {
          "type": "integer",
          "format": "uint64"
        },
        "inMissed": {
          "type": "integer",
          "format": "uint64"
        },
        "inPkts": {
          "type": "integer",
          "format": "uint64"
        },
        "inPktsQ": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NicDeviceQueueData"
          }
        },
        "outBytes": {
          "type": "integer",
          "format": "uint64"
        },
        "outBytesQ": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NicDeviceQueueData"
          }
        },
        "outErrors": {
          "type": "integer",
          "format": "uint64"
        },
        "outPkts": {
          "type": "integer",
          "format": "uint64"
        },
        "outPktsQ": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NicDeviceQueueData"
          }
        },
        "rxNoMbuf": {
          "type": "integer",
          "format": "uint64"
        }
      }
    },
    "RealServerExpandList": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RealServerSpecExpand"
          }
        }
      }
    },
    "RealServerSpecExpand": {
      "type": "object",
      "properties": {
        "Spec": {
          "$ref": "#/definitions/RealServerSpecTiny"
        },
        "Stats": {
          "$ref": "#/definitions/ServerStats"
        }
      }
    },
    "RealServerSpecTiny": {
      "type": "object",
      "properties": {
        "inhibited": {
          "type": "boolean",
          "default": false
        },
        "ip": {
          "type": "string"
        },
        "mode": {
          "type": "string",
          "enum": [
            "FNAT",
            "SNAT",
            "DR",
            "TUNNEL",
            "NAT"
          ]
        },
        "overloaded": {
          "type": "boolean",
          "default": false
        },
        "port": {
          "type": "integer",
          "format": "uint16",
          "x-omitempty": false
        },
        "weight": {
          "type": "integer",
          "format": "uint16",
          "x-omitempty": false
        }
      }
    },
    "RealServerTinyList": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RealServerSpecTiny"
          }
        }
      }
    },
    "RouteSpec": {
      "properties": {
        "device": {
          "type": "string"
        },
        "dst": {
          "type": "string"
        },
        "gateway": {
          "type": "string"
        },
        "metric": {
          "type": "integer",
          "format": "uint32"
        },
        "mtu": {
          "type": "integer",
          "format": "uint32"
        },
        "prefixSrc": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        },
        "src": {
          "type": "string"
        }
      }
    },
    "ServerStats": {
      "type": "object",
      "properties": {
        "Conns": {
          "type": "integer",
          "format": "uint64"
        },
        "Cps": {
          "type": "integer",
          "format": "uint32"
        },
        "InBps": {
          "type": "integer",
          "format": "uint32"
        },
        "InBytes": {
          "type": "integer",
          "format": "uint64"
        },
        "InPkts": {
          "type": "integer",
          "format": "uint64"
        },
        "InPps": {
          "type": "integer",
          "format": "uint32"
        },
        "OutBps": {
          "type": "integer",
          "format": "uint32"
        },
        "OutBytes": {
          "type": "integer",
          "format": "uint64"
        },
        "OutPkts": {
          "type": "integer",
          "format": "uint64"
        },
        "OutPps": {
          "type": "integer",
          "format": "uint32"
        }
      }
    },
    "Status": {
      "description": "Status of an individual component",
      "type": "object",
      "properties": {
        "msg": {
          "description": "Human readable status/error/warning message",
          "type": "string"
        },
        "state": {
          "description": "State the component is in",
          "type": "string",
          "enum": [
            "Ok",
            "Warning",
            "Failure",
            "Disabled"
          ]
        }
      }
    },
    "VirtualServerList": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualServerSpecExpand"
          }
        }
      }
    },
    "VirtualServerSpecExpand": {
      "type": "object",
      "properties": {
        "Addr": {
          "type": "string"
        },
        "Af": {
          "type": "integer",
          "format": "uint32"
        },
        "Bps": {
          "type": "integer",
          "format": "uint32"
        },
        "ConnTimeout": {
          "type": "integer",
          "format": "uint32"
        },
        "DestCheck": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DestCheckSpec"
          }
        },
        "ExpireQuiescent": {
          "type": "string",
          "enum": [
            "true",
            "false"
          ]
        },
        "Flags": {
          "type": "string"
        },
        "Fwmark": {
          "type": "integer",
          "format": "uint32"
        },
        "LimitProportion": {
          "type": "integer",
          "format": "uint32"
        },
        "Match": {
          "$ref": "#/definitions/MatchSpec"
        },
        "Netmask": {
          "type": "integer",
          "format": "uint32"
        },
        "Port": {
          "type": "integer",
          "format": "uint16"
        },
        "Proto": {
          "type": "integer",
          "format": "uint8"
        },
        "ProxyProto": {
          "type": "integer",
          "format": "uint8"
        },
        "RSs": {
          "$ref": "#/definitions/RealServerExpandList"
        },
        "SchedName": {
          "type": "string",
          "enum": [
            "rr",
            "wrr",
            "wlc",
            "conhash"
          ]
        },
        "Stats": {
          "$ref": "#/definitions/ServerStats"
        },
        "SynProxy": {
          "type": "string",
          "enum": [
            "true",
            "false"
          ]
        },
        "Timeout": {
          "type": "integer",
          "format": "uint32"
        }
      }
    },
    "VirtualServerSpecTiny": {
      "type": "object",
      "properties": {
        "Bps": {
          "type": "integer",
          "format": "uint32"
        },
        "ConnTimeout": {
          "type": "integer",
          "format": "uint32"
        },
        "ExpireQuiescent": {
          "type": "boolean",
          "default": false
        },
        "Fwmark": {
          "type": "integer",
          "format": "uint32"
        },
        "LimitProportion": {
          "type": "integer",
          "format": "uint32"
        },
        "Match": {
          "$ref": "#/definitions/MatchSpec"
        },
        "ProxyProtocol": {
          "type": "string",
          "enum": [
            "v2",
            "v1",
            "disable"
          ]
        },
        "SchedName": {
          "type": "string",
          "enum": [
            "rr",
            "wrr",
            "wlc",
            "conhash"
          ]
        },
        "SynProxy": {
          "type": "boolean",
          "default": false
        },
        "Timeout": {
          "type": "integer",
          "format": "uint32"
        }
      }
    },
    "VlanSpec": {
      "properties": {
        "device": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "acl-config": {
      "name": "acl",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/AclAddrList"
      }
    },
    "device-addr": {
      "name": "spec",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/InetAddrSpec"
      }
    },
    "device-name": {
      "type": "string",
      "name": "name",
      "in": "path",
      "required": true
    },
    "forward2kni": {
      "enum": [
        "unset",
        "on",
        "off"
      ],
      "type": "string",
      "default": "unset",
      "name": "forward2Kni",
      "in": "query"
    },
    "healthcheck": {
      "type": "boolean",
      "default": false,
      "name": "healthcheck",
      "in": "query"
    },
    "laddr-config": {
      "name": "spec",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/LocalAddressSpecTiny"
      }
    },
    "link": {
      "enum": [
        "unset",
        "up",
        "down"
      ],
      "type": "string",
      "default": "unset",
      "name": "link",
      "in": "query"
    },
    "promisc": {
      "enum": [
        "unset",
        "on",
        "off"
      ],
      "type": "string",
      "default": "unset",
      "name": "promisc",
      "in": "query"
    },
    "realserver-id": {
      "type": "string",
      "name": "RipPort",
      "in": "path",
      "required": true
    },
    "route-config": {
      "name": "spec",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/RouteSpec"
      }
    },
    "rs-config": {
      "name": "spec",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/RealServerSpecTiny"
      }
    },
    "rss-config": {
      "name": "rss",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/RealServerTinyList"
      }
    },
    "sapool": {
      "type": "boolean",
      "default": false,
      "name": "sapool",
      "in": "query"
    },
    "service-id": {
      "type": "string",
      "name": "VipPort",
      "in": "path",
      "required": true
    },
    "stats": {
      "type": "boolean",
      "default": false,
      "name": "stats",
      "in": "query"
    },
    "verbose": {
      "type": "boolean",
      "default": false,
      "name": "verbose",
      "in": "query"
    },
    "vlan-config": {
      "name": "spec",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/VlanSpec"
      }
    },
    "vs-config": {
      "name": "spec",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/VirtualServerSpecTiny"
      }
    }
  },
  "tags": [
    {
      "description": "virtualserver",
      "name": "virtualserver"
    },
    {
      "description": "route",
      "name": "route"
    },
    {
      "description": "laddr",
      "name": "laddr"
    },
    {
      "description": "tunnel",
      "name": "tunnel"
    },
    {
      "description": "inet addr",
      "name": "inetaddr"
    },
    {
      "description": "white list",
      "name": "white_list"
    },
    {
      "description": "black list",
      "name": "black_list"
    },
    {
      "description": "arp",
      "name": "arp"
    }
  ]
}`))
}
